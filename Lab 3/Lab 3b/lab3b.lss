
lab3b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000063  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000228  00000000  00000000  00000263  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000130  00000000  00000000  0000048b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000215  00000000  00000000  000005bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000070  00000000  00000000  000007d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000108  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000074  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 80 00 	call	0x100	; 0x100 <main>
  78:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initUART>:
  //transmitByte(c);
}

//Initialize settings for UART
void initUART(unsigned int baud) {
    unsigned int ubrr = F_CPU/8/baud-1;
  80:	9c 01       	movw	r18, r24
  82:	40 e0       	ldi	r20, 0x00	; 0
  84:	50 e0       	ldi	r21, 0x00	; 0
  86:	60 e8       	ldi	r22, 0x80	; 128
  88:	74 e8       	ldi	r23, 0x84	; 132
  8a:	8e e1       	ldi	r24, 0x1E	; 30
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0e 94 a2 00 	call	0x144	; 0x144 <__udivmodsi4>
  92:	21 50       	subi	r18, 0x01	; 1
  94:	30 40       	sbci	r19, 0x00	; 0
    // shift MSB and store in UBRR0H
    UBRR0H = (unsigned char) (ubrr >> 8);
  96:	30 93 c5 00 	sts	0x00C5, r19
   // store LSB in UBRR0L
    UBRR0L = (unsigned char) ubrr;
  9a:	20 93 c4 00 	sts	0x00C4, r18
    // enable double speed mode
    UCSR0A = (1 << UDRE0) | (1 << U2X0);
  9e:	82 e2       	ldi	r24, 0x22	; 34
  a0:	80 93 c0 00 	sts	0x00C0, r24
    // Enable transmitter/receiver
    UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  a4:	88 e1       	ldi	r24, 0x18	; 24
  a6:	80 93 c1 00 	sts	0x00C1, r24
    //8-Bit Characters, 0 Stop bits, No parity
    UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
  aa:	86 e0       	ldi	r24, 0x06	; 6
  ac:	80 93 c2 00 	sts	0x00C2, r24
  }
  b0:	08 95       	ret

000000b2 <receiveByte>:

    // Read byte from UART
    unsigned char receiveByte ( void ) {
       while ( !(UCSR0A &  (1 << RXC0)) );
  b2:	80 91 c0 00 	lds	r24, 0x00C0
  b6:	87 ff       	sbrs	r24, 7
  b8:	fc cf       	rjmp	.-8      	; 0xb2 <receiveByte>
       // Wait for incoming byte
       return UDR0;
  ba:	80 91 c6 00 	lds	r24, 0x00C6
       // Return the byte
    }
  be:	08 95       	ret

000000c0 <transmitByte>:

   // Write byte to UART
    void transmitByte (unsigned char data) {
  c0:	98 2f       	mov	r25, r24
      while ( !(UCSR0A & (1 << UDRE0)) );
  c2:	80 91 c0 00 	lds	r24, 0x00C0
  c6:	85 ff       	sbrs	r24, 5
  c8:	fc cf       	rjmp	.-8      	; 0xc2 <transmitByte+0x2>
      // Wait for empty transmit buffer
      UDR0 = data;
  ca:	90 93 c6 00 	sts	0x00C6, r25
      // Start transmission by writing to UDR0 register
    }
  ce:	08 95       	ret

000000d0 <printDec>:
  return 0;
}

//function for counting printDec
void printDec(int num) {
  if (num <= 10) {
  d0:	8b 30       	cpi	r24, 0x0B	; 11
  d2:	91 05       	cpc	r25, r1
  d4:	14 f4       	brge	.+4      	; 0xda <printDec+0xa>
    char c = num + '0';
    transmitByte(c);
  d6:	80 5d       	subi	r24, 0xD0	; 208
  d8:	01 c0       	rjmp	.+2      	; 0xdc <printDec+0xc>
  } else if (num >= 10) {
    char n = num + 'a';
    transmitByte(n);
  da:	8f 59       	subi	r24, 0x9F	; 159
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 60 00 	call	0xc0	; 0xc0 <transmitByte>
  e2:	08 95       	ret

000000e4 <delay_ms>:
      // Wait for empty transmit buffer
      UDR0 = data;
      // Start transmission by writing to UDR0 register
    }

    void delay_ms (uint16_t ms) {
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e8:	40 ea       	ldi	r20, 0xA0	; 160
  ea:	5f e0       	ldi	r21, 0x0F	; 15
  ec:	05 c0       	rjmp	.+10     	; 0xf8 <delay_ms+0x14>
  ee:	fa 01       	movw	r30, r20
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <delay_ms+0xc>
    	uint16_t i;
    	for (i = 0; i < ms; i++)
  f4:	2f 5f       	subi	r18, 0xFF	; 255
  f6:	3f 4f       	sbci	r19, 0xFF	; 255
  f8:	28 17       	cp	r18, r24
  fa:	39 07       	cpc	r19, r25
  fc:	c0 f3       	brcs	.-16     	; 0xee <delay_ms+0xa>
    		_delay_ms(1);

    }
  fe:	08 95       	ret

00000100 <main>:
#define F_CPU 16000000UL
#include <util/delay.h>

void DELAY_ms (unit16_t_ms_count);

int main(void) {
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
  initUART(2400);
 104:	80 e6       	ldi	r24, 0x60	; 96
 106:	99 e0       	ldi	r25, 0x09	; 9
 108:	0e 94 40 00 	call	0x80	; 0x80 <initUART>
  //declare DDRx
  DDRB = 0x00; //set all PBx to input
 10c:	14 b8       	out	0x04, r1	; 4
  PORTB = 0b1111111; //set PB0 and PB1 internal pullups
 10e:	8f e7       	ldi	r24, 0x7F	; 127
 110:	85 b9       	out	0x05, r24	; 5
 112:	c0 e0       	ldi	r28, 0x00	; 0
 114:	d0 e0       	ldi	r29, 0x00	; 0
  int num = 0;
  while(1) {
        if ((PINB & 0b0000100) == 0) { //check if s4 is pressed
 116:	1a 99       	sbic	0x03, 2	; 3
 118:	08 c0       	rjmp	.+16     	; 0x12a <main+0x2a>
          delay_ms(100); //Provides required delay
 11a:	84 e6       	ldi	r24, 0x64	; 100
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 72 00 	call	0xe4	; 0xe4 <delay_ms>
          if ((PINB & 0b0000100) == 0) {
 122:	1a 99       	sbic	0x03, 2	; 3
 124:	f8 cf       	rjmp	.-16     	; 0x116 <main+0x16>
            num++;  //add 1 to n
 126:	21 96       	adiw	r28, 0x01	; 1
 128:	09 c0       	rjmp	.+18     	; 0x13c <main+0x3c>
            printDec(num);
          }
        } else if ((PINB & 0b0001000) == 0) { //check if s2 is pressed
 12a:	1b 99       	sbic	0x03, 3	; 3
 12c:	f4 cf       	rjmp	.-24     	; 0x116 <main+0x16>
          delay_ms(100); // delay_ms
 12e:	84 e6       	ldi	r24, 0x64	; 100
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 72 00 	call	0xe4	; 0xe4 <delay_ms>
          if ((PINB & 0b0001000) == 0) {
 136:	1b 99       	sbic	0x03, 3	; 3
 138:	ee cf       	rjmp	.-36     	; 0x116 <main+0x16>
            num--;
 13a:	21 97       	sbiw	r28, 0x01	; 1
            printDec(num);
 13c:	ce 01       	movw	r24, r28
 13e:	0e 94 68 00 	call	0xd0	; 0xd0 <printDec>
 142:	e9 cf       	rjmp	.-46     	; 0x116 <main+0x16>

00000144 <__udivmodsi4>:
 144:	a1 e2       	ldi	r26, 0x21	; 33
 146:	1a 2e       	mov	r1, r26
 148:	aa 1b       	sub	r26, r26
 14a:	bb 1b       	sub	r27, r27
 14c:	fd 01       	movw	r30, r26
 14e:	0d c0       	rjmp	.+26     	; 0x16a <__udivmodsi4_ep>

00000150 <__udivmodsi4_loop>:
 150:	aa 1f       	adc	r26, r26
 152:	bb 1f       	adc	r27, r27
 154:	ee 1f       	adc	r30, r30
 156:	ff 1f       	adc	r31, r31
 158:	a2 17       	cp	r26, r18
 15a:	b3 07       	cpc	r27, r19
 15c:	e4 07       	cpc	r30, r20
 15e:	f5 07       	cpc	r31, r21
 160:	20 f0       	brcs	.+8      	; 0x16a <__udivmodsi4_ep>
 162:	a2 1b       	sub	r26, r18
 164:	b3 0b       	sbc	r27, r19
 166:	e4 0b       	sbc	r30, r20
 168:	f5 0b       	sbc	r31, r21

0000016a <__udivmodsi4_ep>:
 16a:	66 1f       	adc	r22, r22
 16c:	77 1f       	adc	r23, r23
 16e:	88 1f       	adc	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	1a 94       	dec	r1
 174:	69 f7       	brne	.-38     	; 0x150 <__udivmodsi4_loop>
 176:	60 95       	com	r22
 178:	70 95       	com	r23
 17a:	80 95       	com	r24
 17c:	90 95       	com	r25
 17e:	9b 01       	movw	r18, r22
 180:	ac 01       	movw	r20, r24
 182:	bd 01       	movw	r22, r26
 184:	cf 01       	movw	r24, r30
 186:	08 95       	ret

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
