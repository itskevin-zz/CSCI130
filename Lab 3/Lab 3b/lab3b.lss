
lab3b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000230  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000063  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000228  00000000  00000000  00000307  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000140  00000000  00000000  0000052f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000216  00000000  00000000  0000066f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000070  00000000  00000000  00000888  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000010e  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000074  00000000  00000000  00000a06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 98 00 	call	0x130	; 0x130 <main>
  78:	0c 94 16 01 	jmp	0x22c	; 0x22c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initUART>:
}


//Initialize settings for UART
void initUART(unsigned int baud) {
    unsigned int ubrr = F_CPU/8/baud-1;
  80:	9c 01       	movw	r18, r24
  82:	40 e0       	ldi	r20, 0x00	; 0
  84:	50 e0       	ldi	r21, 0x00	; 0
  86:	60 e8       	ldi	r22, 0x80	; 128
  88:	74 e8       	ldi	r23, 0x84	; 132
  8a:	8e e1       	ldi	r24, 0x1E	; 30
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0e 94 ba 00 	call	0x174	; 0x174 <__udivmodsi4>
  92:	21 50       	subi	r18, 0x01	; 1
  94:	30 40       	sbci	r19, 0x00	; 0
    // shift MSB and store in UBRR0H
    UBRR0H = (unsigned char) (ubrr >> 8);
  96:	30 93 c5 00 	sts	0x00C5, r19
   // store LSB in UBRR0L
    UBRR0L = (unsigned char) ubrr;
  9a:	20 93 c4 00 	sts	0x00C4, r18
    // enable double speed mode
    UCSR0A = (1 << UDRE0) | (1 << U2X0);
  9e:	82 e2       	ldi	r24, 0x22	; 34
  a0:	80 93 c0 00 	sts	0x00C0, r24
    // Enable transmitter/receiver
    UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  a4:	88 e1       	ldi	r24, 0x18	; 24
  a6:	80 93 c1 00 	sts	0x00C1, r24
    //8-Bit Characters, 0 Stop bits, No parity
    UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
  aa:	86 e0       	ldi	r24, 0x06	; 6
  ac:	80 93 c2 00 	sts	0x00C2, r24
  }
  b0:	08 95       	ret

000000b2 <receiveByte>:

    // Read byte from UART
    unsigned char receiveByte ( void ) {
       while ( !(UCSR0A &  (1 << RXC0)) );
  b2:	80 91 c0 00 	lds	r24, 0x00C0
  b6:	87 ff       	sbrs	r24, 7
  b8:	fc cf       	rjmp	.-8      	; 0xb2 <receiveByte>
       // Wait for incoming byte
       return UDR0;
  ba:	80 91 c6 00 	lds	r24, 0x00C6
       // Return the byte
    }
  be:	08 95       	ret

000000c0 <transmitByte>:

   // Write byte to UART
    void transmitByte (unsigned char data) {
  c0:	98 2f       	mov	r25, r24
      while ( !(UCSR0A & (1 << UDRE0)) );
  c2:	80 91 c0 00 	lds	r24, 0x00C0
  c6:	85 ff       	sbrs	r24, 5
  c8:	fc cf       	rjmp	.-8      	; 0xc2 <transmitByte+0x2>
      // Wait for empty transmit buffer
      UDR0 = data;
  ca:	90 93 c6 00 	sts	0x00C6, r25
      // Start transmission by writing to UDR0 register
    }
  ce:	08 95       	ret

000000d0 <delay_ms>:

    void delay_ms (uint16_t ms) {
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d4:	40 ea       	ldi	r20, 0xA0	; 160
  d6:	5f e0       	ldi	r21, 0x0F	; 15
  d8:	05 c0       	rjmp	.+10     	; 0xe4 <delay_ms+0x14>
  da:	fa 01       	movw	r30, r20
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <delay_ms+0xc>
    	uint16_t i;
    	for (i = 0; i < ms; i++)
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	3f 4f       	sbci	r19, 0xFF	; 255
  e4:	28 17       	cp	r18, r24
  e6:	39 07       	cpc	r19, r25
  e8:	c0 f3       	brcs	.-16     	; 0xda <delay_ms+0xa>
    		_delay_ms(1);

    }
  ea:	08 95       	ret

000000ec <printDec>:
  }
  return 0;
}

//function for counting printDec
void printDec(int num) {
  ec:	0f 93       	push	r16
  ee:	1f 93       	push	r17
  f0:	df 93       	push	r29
  f2:	cf 93       	push	r28
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	2a 97       	sbiw	r28, 0x0a	; 10
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	f8 94       	cli
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0f be       	out	0x3f, r0	; 63
 102:	cd bf       	out	0x3d, r28	; 61
 104:	8c 01       	movw	r16, r24
  int n = num;
  char ascii[10];
  utoa(n,ascii, 10);
 106:	be 01       	movw	r22, r28
 108:	6f 5f       	subi	r22, 0xFF	; 255
 10a:	7f 4f       	sbci	r23, 0xFF	; 255
 10c:	4a e0       	ldi	r20, 0x0A	; 10
 10e:	50 e0       	ldi	r21, 0x00	; 0
 110:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <utoa>
  transmitByte(n);
 114:	c8 01       	movw	r24, r16
 116:	0e 94 60 00 	call	0xc0	; 0xc0 <transmitByte>
  unsigned char buf = num;
  transmitByte(buf); //output
  buf=(num>>8); //put upper byte into lower
  transmitByte(buf);
  */
}
 11a:	2a 96       	adiw	r28, 0x0a	; 10
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	de bf       	out	0x3e, r29	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	cd bf       	out	0x3d, r28	; 61
 126:	cf 91       	pop	r28
 128:	df 91       	pop	r29
 12a:	1f 91       	pop	r17
 12c:	0f 91       	pop	r16
 12e:	08 95       	ret

00000130 <main>:
#include <stdint.h>


void DELAY_ms (unit16_t_ms_count);

int main(void) {
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
  initUART(2400);
 134:	80 e6       	ldi	r24, 0x60	; 96
 136:	99 e0       	ldi	r25, 0x09	; 9
 138:	0e 94 40 00 	call	0x80	; 0x80 <initUART>
  //declare DDRx
  DDRB = 0x00; //set all PBx to input
 13c:	14 b8       	out	0x04, r1	; 4
  PORTB = 0b1111111; //set PB0 and PB1 internal pullups
 13e:	8f e7       	ldi	r24, 0x7F	; 127
 140:	85 b9       	out	0x05, r24	; 5
 142:	c0 e0       	ldi	r28, 0x00	; 0
 144:	d0 e0       	ldi	r29, 0x00	; 0
  int num = 0;
  while(1) {
        if ((PINB & 0b0000100) == 0) { //check if s4 is pressed
 146:	1a 99       	sbic	0x03, 2	; 3
 148:	08 c0       	rjmp	.+16     	; 0x15a <main+0x2a>
          delay_ms(100); //Provides required delay
 14a:	84 e6       	ldi	r24, 0x64	; 100
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 68 00 	call	0xd0	; 0xd0 <delay_ms>
          if ((PINB & 0b0000100) == 0) {
 152:	1a 99       	sbic	0x03, 2	; 3
 154:	f8 cf       	rjmp	.-16     	; 0x146 <main+0x16>
            num++;  //add 1 to n
 156:	21 96       	adiw	r28, 0x01	; 1
 158:	09 c0       	rjmp	.+18     	; 0x16c <main+0x3c>
            printDec(num);
          }
        } else if ((PINB & 0b0001000) == 0) { //check if s2 is pressed
 15a:	1b 99       	sbic	0x03, 3	; 3
 15c:	f4 cf       	rjmp	.-24     	; 0x146 <main+0x16>
          delay_ms(100); // delay_ms
 15e:	84 e6       	ldi	r24, 0x64	; 100
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 68 00 	call	0xd0	; 0xd0 <delay_ms>
          if ((PINB & 0b0001000) == 0) {
 166:	1b 99       	sbic	0x03, 3	; 3
 168:	ee cf       	rjmp	.-36     	; 0x146 <main+0x16>
            num--;
 16a:	21 97       	sbiw	r28, 0x01	; 1
            printDec(num);
 16c:	ce 01       	movw	r24, r28
 16e:	0e 94 76 00 	call	0xec	; 0xec <printDec>
 172:	e9 cf       	rjmp	.-46     	; 0x146 <main+0x16>

00000174 <__udivmodsi4>:
 174:	a1 e2       	ldi	r26, 0x21	; 33
 176:	1a 2e       	mov	r1, r26
 178:	aa 1b       	sub	r26, r26
 17a:	bb 1b       	sub	r27, r27
 17c:	fd 01       	movw	r30, r26
 17e:	0d c0       	rjmp	.+26     	; 0x19a <__udivmodsi4_ep>

00000180 <__udivmodsi4_loop>:
 180:	aa 1f       	adc	r26, r26
 182:	bb 1f       	adc	r27, r27
 184:	ee 1f       	adc	r30, r30
 186:	ff 1f       	adc	r31, r31
 188:	a2 17       	cp	r26, r18
 18a:	b3 07       	cpc	r27, r19
 18c:	e4 07       	cpc	r30, r20
 18e:	f5 07       	cpc	r31, r21
 190:	20 f0       	brcs	.+8      	; 0x19a <__udivmodsi4_ep>
 192:	a2 1b       	sub	r26, r18
 194:	b3 0b       	sbc	r27, r19
 196:	e4 0b       	sbc	r30, r20
 198:	f5 0b       	sbc	r31, r21

0000019a <__udivmodsi4_ep>:
 19a:	66 1f       	adc	r22, r22
 19c:	77 1f       	adc	r23, r23
 19e:	88 1f       	adc	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	1a 94       	dec	r1
 1a4:	69 f7       	brne	.-38     	; 0x180 <__udivmodsi4_loop>
 1a6:	60 95       	com	r22
 1a8:	70 95       	com	r23
 1aa:	80 95       	com	r24
 1ac:	90 95       	com	r25
 1ae:	9b 01       	movw	r18, r22
 1b0:	ac 01       	movw	r20, r24
 1b2:	bd 01       	movw	r22, r26
 1b4:	cf 01       	movw	r24, r30
 1b6:	08 95       	ret

000001b8 <utoa>:
 1b8:	fb 01       	movw	r30, r22
 1ba:	9f 01       	movw	r18, r30
 1bc:	42 30       	cpi	r20, 0x02	; 2
 1be:	74 f0       	brlt	.+28     	; 0x1dc <utoa+0x24>
 1c0:	45 32       	cpi	r20, 0x25	; 37
 1c2:	64 f4       	brge	.+24     	; 0x1dc <utoa+0x24>
 1c4:	64 2f       	mov	r22, r20
 1c6:	77 27       	eor	r23, r23
 1c8:	0e 94 02 01 	call	0x204	; 0x204 <__udivmodhi4>
 1cc:	80 5d       	subi	r24, 0xD0	; 208
 1ce:	8a 33       	cpi	r24, 0x3A	; 58
 1d0:	0c f0       	brlt	.+2      	; 0x1d4 <utoa+0x1c>
 1d2:	89 5d       	subi	r24, 0xD9	; 217
 1d4:	81 93       	st	Z+, r24
 1d6:	cb 01       	movw	r24, r22
 1d8:	00 97       	sbiw	r24, 0x00	; 0
 1da:	a1 f7       	brne	.-24     	; 0x1c4 <utoa+0xc>
 1dc:	10 82       	st	Z, r1
 1de:	c9 01       	movw	r24, r18
 1e0:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <strrev>

000001e4 <strrev>:
 1e4:	dc 01       	movw	r26, r24
 1e6:	fc 01       	movw	r30, r24
 1e8:	67 2f       	mov	r22, r23
 1ea:	71 91       	ld	r23, Z+
 1ec:	77 23       	and	r23, r23
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <strrev+0x4>
 1f0:	32 97       	sbiw	r30, 0x02	; 2
 1f2:	04 c0       	rjmp	.+8      	; 0x1fc <strrev+0x18>
 1f4:	7c 91       	ld	r23, X
 1f6:	6d 93       	st	X+, r22
 1f8:	70 83       	st	Z, r23
 1fa:	62 91       	ld	r22, -Z
 1fc:	ae 17       	cp	r26, r30
 1fe:	bf 07       	cpc	r27, r31
 200:	c8 f3       	brcs	.-14     	; 0x1f4 <strrev+0x10>
 202:	08 95       	ret

00000204 <__udivmodhi4>:
 204:	aa 1b       	sub	r26, r26
 206:	bb 1b       	sub	r27, r27
 208:	51 e1       	ldi	r21, 0x11	; 17
 20a:	07 c0       	rjmp	.+14     	; 0x21a <__udivmodhi4_ep>

0000020c <__udivmodhi4_loop>:
 20c:	aa 1f       	adc	r26, r26
 20e:	bb 1f       	adc	r27, r27
 210:	a6 17       	cp	r26, r22
 212:	b7 07       	cpc	r27, r23
 214:	10 f0       	brcs	.+4      	; 0x21a <__udivmodhi4_ep>
 216:	a6 1b       	sub	r26, r22
 218:	b7 0b       	sbc	r27, r23

0000021a <__udivmodhi4_ep>:
 21a:	88 1f       	adc	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	5a 95       	dec	r21
 220:	a9 f7       	brne	.-22     	; 0x20c <__udivmodhi4_loop>
 222:	80 95       	com	r24
 224:	90 95       	com	r25
 226:	bc 01       	movw	r22, r24
 228:	cd 01       	movw	r24, r26
 22a:	08 95       	ret

0000022c <_exit>:
 22c:	f8 94       	cli

0000022e <__stop_program>:
 22e:	ff cf       	rjmp	.-2      	; 0x22e <__stop_program>
