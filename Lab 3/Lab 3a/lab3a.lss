
lab3a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000049  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000105  00000000  00000000  000001ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000a5  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000f3  00000000  00000000  00000399  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  0000048c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000bc  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000041  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  78:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initUART>:
	return 0;
}

//Initialize settings for UART
void initUART(unsigned int baud) {
    unsigned int ubrr = F_CPU/8/baud-1;
  80:	9c 01       	movw	r18, r24
  82:	40 e0       	ldi	r20, 0x00	; 0
  84:	50 e0       	ldi	r21, 0x00	; 0
  86:	60 e8       	ldi	r22, 0x80	; 128
  88:	74 e8       	ldi	r23, 0x84	; 132
  8a:	8e e1       	ldi	r24, 0x1E	; 30
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0e 94 75 00 	call	0xea	; 0xea <__udivmodsi4>
  92:	21 50       	subi	r18, 0x01	; 1
  94:	30 40       	sbci	r19, 0x00	; 0
    // shift MSB and store in UBRR0H
    UBRR0H = (unsigned char) (ubrr >> 8);
  96:	30 93 c5 00 	sts	0x00C5, r19
   // store LSB in UBRR0L
    UBRR0L = (unsigned char) ubrr;
  9a:	20 93 c4 00 	sts	0x00C4, r18
    // enable double speed mode
    UCSR0A = (1 << UDRE0) | (1 << U2X0);
  9e:	82 e2       	ldi	r24, 0x22	; 34
  a0:	80 93 c0 00 	sts	0x00C0, r24
    // Enable transmitter/receiver
    UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  a4:	88 e1       	ldi	r24, 0x18	; 24
  a6:	80 93 c1 00 	sts	0x00C1, r24
    //8-Bit Characters, 0 Stop bits, No parity
    UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
  aa:	86 e0       	ldi	r24, 0x06	; 6
  ac:	80 93 c2 00 	sts	0x00C2, r24
  }
  b0:	08 95       	ret

000000b2 <receiveByte>:

    // Read byte from UART
    unsigned char receiveByte ( void ) {
       while ( !(UCSR0A &  (1 << RXC0)) );
  b2:	80 91 c0 00 	lds	r24, 0x00C0
  b6:	87 ff       	sbrs	r24, 7
  b8:	fc cf       	rjmp	.-8      	; 0xb2 <receiveByte>
       // Wait for incoming byte
       return UDR0;
  ba:	80 91 c6 00 	lds	r24, 0x00C6
       // Return the byte
    }
  be:	08 95       	ret

000000c0 <transmitByte>:

   // Write byte to UART
    void transmitByte (unsigned char data) {
      while ( !(UCSR0A & (1 << UDRE0)) );
  c0:	80 91 c0 00 	lds	r24, 0x00C0
  c4:	85 ff       	sbrs	r24, 5
  c6:	fc cf       	rjmp	.-8      	; 0xc0 <transmitByte>
    UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
  }

    // Read byte from UART
    unsigned char receiveByte ( void ) {
       while ( !(UCSR0A &  (1 << RXC0)) );
  c8:	80 91 c0 00 	lds	r24, 0x00C0
  cc:	87 ff       	sbrs	r24, 7
  ce:	fc cf       	rjmp	.-8      	; 0xc8 <transmitByte+0x8>
       // Wait for incoming byte
       return UDR0;
  d0:	80 91 c6 00 	lds	r24, 0x00C6

   // Write byte to UART
    void transmitByte (unsigned char data) {
      while ( !(UCSR0A & (1 << UDRE0)) );
      // Wait for empty transmit buffer
      UDR0 = receiveByte() + 1;
  d4:	8f 5f       	subi	r24, 0xFF	; 255
  d6:	80 93 c6 00 	sts	0x00C6, r24
      // Start transmission by writing to UDR0 register
    }
  da:	08 95       	ret

000000dc <main>:
#include <avr/io.h>
#define F_CPU 16000000UL
#include <util/delay.h>

int main(void) {
  initUART(2400);
  dc:	80 e6       	ldi	r24, 0x60	; 96
  de:	99 e0       	ldi	r25, 0x09	; 9
  e0:	0e 94 40 00 	call	0x80	; 0x80 <initUART>
  while (1)
    {
      transmitByte();
  e4:	0e 94 60 00 	call	0xc0	; 0xc0 <transmitByte>
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <main+0x8>

000000ea <__udivmodsi4>:
  ea:	a1 e2       	ldi	r26, 0x21	; 33
  ec:	1a 2e       	mov	r1, r26
  ee:	aa 1b       	sub	r26, r26
  f0:	bb 1b       	sub	r27, r27
  f2:	fd 01       	movw	r30, r26
  f4:	0d c0       	rjmp	.+26     	; 0x110 <__udivmodsi4_ep>

000000f6 <__udivmodsi4_loop>:
  f6:	aa 1f       	adc	r26, r26
  f8:	bb 1f       	adc	r27, r27
  fa:	ee 1f       	adc	r30, r30
  fc:	ff 1f       	adc	r31, r31
  fe:	a2 17       	cp	r26, r18
 100:	b3 07       	cpc	r27, r19
 102:	e4 07       	cpc	r30, r20
 104:	f5 07       	cpc	r31, r21
 106:	20 f0       	brcs	.+8      	; 0x110 <__udivmodsi4_ep>
 108:	a2 1b       	sub	r26, r18
 10a:	b3 0b       	sbc	r27, r19
 10c:	e4 0b       	sbc	r30, r20
 10e:	f5 0b       	sbc	r31, r21

00000110 <__udivmodsi4_ep>:
 110:	66 1f       	adc	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	88 1f       	adc	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	1a 94       	dec	r1
 11a:	69 f7       	brne	.-38     	; 0xf6 <__udivmodsi4_loop>
 11c:	60 95       	com	r22
 11e:	70 95       	com	r23
 120:	80 95       	com	r24
 122:	90 95       	com	r25
 124:	9b 01       	movw	r18, r22
 126:	ac 01       	movw	r20, r24
 128:	bd 01       	movw	r22, r26
 12a:	cf 01       	movw	r24, r30
 12c:	08 95       	ret

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
