
lab2b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000009a  00000000  00000000  00000167  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000064  00000000  00000000  00000201  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000b1  00000000  00000000  00000265  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000090  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

void main(void) {
  //declare n counter

  //declare DDRx
  DDRD = 0b11111100;  //set PD2-PD7 to output
  80:	8c ef       	ldi	r24, 0xFC	; 252
  82:	8a b9       	out	0x0a, r24	; 10
  DDRB = 0b00000011; //set PB0-PB1 to output and rest to input
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	84 b9       	out	0x04, r24	; 4
  PORTB = 0b00001100; // set internal pullups in PB2 and PB3 turn PB0 and PB1 off
  88:	8c e0       	ldi	r24, 0x0C	; 12
  8a:	85 b9       	out	0x05, r24	; 5
  PORTD = 0b00000000;
  8c:	1b b8       	out	0x0b, r1	; 11
  8e:	40 e0       	ldi	r20, 0x00	; 0
  90:	50 e0       	ldi	r21, 0x00	; 0
 int num = 0;

  do {
    int loop = 0;
    loop++;
    if ((PINB & 0b0000100) == 0 && (loop == 1)) { //check if s4 is pressed
  92:	1a 99       	sbic	0x03, 2	; 3
  94:	03 c0       	rjmp	.+6      	; 0x9c <main+0x1c>
      num++;  //add 1 to n i.e. n = 1 on first loop
  96:	4f 5f       	subi	r20, 0xFF	; 255
  98:	5f 4f       	sbci	r21, 0xFF	; 255
  9a:	04 c0       	rjmp	.+8      	; 0xa4 <main+0x24>
      PORTD &= 0b0000011; //clear bits 7 - 2
      PORTD |= (num << 2);  //shift bits

      PORTB &= 0b11111100; //clear bits 1 - 0
      PORTB |= (num >> 6);  //shit bits
    } else if ((PINB & 0b0001000) == 0 && (loop == 1)) { //check if s2 is pressed
  9c:	1b 99       	sbic	0x03, 3	; 3
  9e:	f9 cf       	rjmp	.-14     	; 0x92 <main+0x12>
      num--; //minus 1 to n
  a0:	41 50       	subi	r20, 0x01	; 1
  a2:	50 40       	sbci	r21, 0x00	; 0
      PORTD &= 0b00000011; //clear bits
  a4:	8b b1       	in	r24, 0x0b	; 11
  a6:	83 70       	andi	r24, 0x03	; 3
  a8:	8b b9       	out	0x0b, r24	; 11
      PORTD |= (num << 2); //shift bits
  aa:	2b b1       	in	r18, 0x0b	; 11
  ac:	ca 01       	movw	r24, r20
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	28 2b       	or	r18, r24
  b8:	2b b9       	out	0x0b, r18	; 11

      PORTB &= 0b11111100;
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	8c 7f       	andi	r24, 0xFC	; 252
  be:	85 b9       	out	0x05, r24	; 5
      PORTB |= (num >> 6);
  c0:	25 b1       	in	r18, 0x05	; 5
  c2:	ca 01       	movw	r24, r20
  c4:	36 e0       	ldi	r19, 0x06	; 6
  c6:	95 95       	asr	r25
  c8:	87 95       	ror	r24
  ca:	3a 95       	dec	r19
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x46>
  ce:	28 2b       	or	r18, r24
  d0:	25 b9       	out	0x05, r18	; 5
  d2:	df cf       	rjmp	.-66     	; 0x92 <main+0x12>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
