
lab2a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000110  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000110  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001a4  2**0
                  ALLOC
  3 .stab         0000012c  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000070  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000028  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000789  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000006d5  00000000  00000000  00000b45  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000010c  00000000  00000000  0000121a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000034  00000000  00000000  00001328  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000037d  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000006a  00000000  00000000  000016d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  00001743  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 57 00 	call	0xae	; 0xae <main>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <delay_ms>:
  return 0;
}

void delay_ms (uint16_t ms) {
	uint16_t i;
	for (i = 0; i < ms; i++)
  90:	20 e0       	ldi	r18, 0x00	; 0
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	28 17       	cp	r18, r24
  96:	39 07       	cpc	r19, r25
  98:	09 f4       	brne	.+2      	; 0x9c <delay_ms+0xc>
		_delay_ms(1);

}
  9a:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	ef e9       	ldi	r30, 0x9F	; 159
  9e:	ff e0       	ldi	r31, 0x0F	; 15
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <delay_ms+0x10>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <delay_ms+0x16>
  a6:	00 00       	nop
  return 0;
}

void delay_ms (uint16_t ms) {
	uint16_t i;
	for (i = 0; i < ms; i++)
  a8:	2f 5f       	subi	r18, 0xFF	; 255
  aa:	3f 4f       	sbci	r19, 0xFF	; 255
  ac:	f3 cf       	rjmp	.-26     	; 0x94 <delay_ms+0x4>

000000ae <main>:
//Declare Gloval Variables
int num = 0;

int main(void) {
  //declare DDRx
  DDRD = 0b11111100; /* (1<<2)|(1<<3)}(1<<4)|(1<<5)|(1<<6)|(1<<7); */
  ae:	8c ef       	ldi	r24, 0xFC	; 252
  b0:	8a b9       	out	0x0a, r24	; 10
  DDRB = 0b00000011;
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	84 b9       	out	0x04, r24	; 4

  while (1) {
    num++;
  b6:	80 91 00 01 	lds	r24, 0x0100
  ba:	90 91 01 01 	lds	r25, 0x0101
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	90 93 01 01 	sts	0x0101, r25
  c4:	80 93 00 01 	sts	0x0100, r24
    delay_ms(1000);
  c8:	88 ee       	ldi	r24, 0xE8	; 232
  ca:	93 e0       	ldi	r25, 0x03	; 3
  cc:	0e 94 48 00 	call	0x90	; 0x90 <delay_ms>

    PORTD &= 0b00000011;
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	83 70       	andi	r24, 0x03	; 3
  d4:	8b b9       	out	0x0b, r24	; 11
    PORTD |= num << 2;
  d6:	8b b1       	in	r24, 0x0b	; 11
  d8:	20 91 00 01 	lds	r18, 0x0100
  dc:	30 91 01 01 	lds	r19, 0x0101
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	22 0f       	add	r18, r18
  e6:	33 1f       	adc	r19, r19
  e8:	82 2b       	or	r24, r18
  ea:	8b b9       	out	0x0b, r24	; 11

    PORTB &= 0b11111100;
  ec:	85 b1       	in	r24, 0x05	; 5
  ee:	8c 7f       	andi	r24, 0xFC	; 252
  f0:	85 b9       	out	0x05, r24	; 5
    PORTB |= num >> 6;
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	20 91 00 01 	lds	r18, 0x0100
  f8:	30 91 01 01 	lds	r19, 0x0101
  fc:	46 e0       	ldi	r20, 0x06	; 6
  fe:	35 95       	asr	r19
 100:	27 95       	ror	r18
 102:	4a 95       	dec	r20
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x50>
 106:	82 2b       	or	r24, r18
 108:	85 b9       	out	0x05, r24	; 5
 10a:	d5 cf       	rjmp	.-86     	; 0xb6 <main+0x8>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
