
lab2a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000108  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  0000017c  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000154  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000e5  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000152  00000000  00000000  00000405  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  00000558  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ce  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 56 00 	call	0xac	; 0xac <main>
  88:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <delay_ms>:
    PORTB |= num >> 6;
  }
  return 0;
}

void delay_ms (uint16_t ms) {
  90:	20 e0       	ldi	r18, 0x00	; 0
  92:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  94:	40 ea       	ldi	r20, 0xA0	; 160
  96:	5f e0       	ldi	r21, 0x0F	; 15
  98:	05 c0       	rjmp	.+10     	; 0xa4 <delay_ms+0x14>
  9a:	fa 01       	movw	r30, r20
  9c:	31 97       	sbiw	r30, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <delay_ms+0xc>
	uint16_t i;
	for (i = 0; i < ms; i++)
  a0:	2f 5f       	subi	r18, 0xFF	; 255
  a2:	3f 4f       	sbci	r19, 0xFF	; 255
  a4:	28 17       	cp	r18, r24
  a6:	39 07       	cpc	r19, r25
  a8:	c0 f3       	brcs	.-16     	; 0x9a <delay_ms+0xa>
		_delay_ms(1);

}
  aa:	08 95       	ret

000000ac <main>:
//Declare Gloval Variables
int num = 0;

int main(void) {
  //declare DDRx
  DDRD = 0b11111100; /* (1<<2)|(1<<3)}(1<<4)|(1<<5)|(1<<6)|(1<<7); */
  ac:	8c ef       	ldi	r24, 0xFC	; 252
  ae:	8a b9       	out	0x0a, r24	; 10
  DDRB = 0b00000011;
  b0:	83 e0       	ldi	r24, 0x03	; 3
  b2:	84 b9       	out	0x04, r24	; 4

  while (1) {
    num++;
  b4:	80 91 00 01 	lds	r24, 0x0100
  b8:	90 91 01 01 	lds	r25, 0x0101
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	90 93 01 01 	sts	0x0101, r25
  c2:	80 93 00 01 	sts	0x0100, r24
    delay_ms(500);
  c6:	84 ef       	ldi	r24, 0xF4	; 244
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	0e 94 48 00 	call	0x90	; 0x90 <delay_ms>

    PORTD &= 0b00000011;
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	83 70       	andi	r24, 0x03	; 3
  d2:	8b b9       	out	0x0b, r24	; 11
    PORTD |= num << 2;
  d4:	4b b1       	in	r20, 0x0b	; 11
  d6:	20 91 00 01 	lds	r18, 0x0100
  da:	30 91 01 01 	lds	r19, 0x0101
  de:	c9 01       	movw	r24, r18
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	48 2b       	or	r20, r24
  ea:	4b b9       	out	0x0b, r20	; 11

    PORTB &= 0b11111100;
  ec:	85 b1       	in	r24, 0x05	; 5
  ee:	8c 7f       	andi	r24, 0xFC	; 252
  f0:	85 b9       	out	0x05, r24	; 5
    PORTB |= num >> 6;
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	96 e0       	ldi	r25, 0x06	; 6
  f6:	35 95       	asr	r19
  f8:	27 95       	ror	r18
  fa:	9a 95       	dec	r25
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x4a>
  fe:	82 2b       	or	r24, r18
 100:	85 b9       	out	0x05, r24	; 5
 102:	d8 cf       	rjmp	.-80     	; 0xb4 <main+0x8>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
